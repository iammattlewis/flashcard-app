{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport { readDeck, createCard } from \"../utils/api\";\nimport CardForm from \"./CardForm\";\nfunction AddCard() {\n  _s();\n  const mountedRef = useRef(false);\n  const initialFormState = {\n    id: \"\",\n    front: \"\",\n    back: \"\",\n    deckId: \"\"\n  };\n  const [deck, setDeck] = useState({\n    name: \"loading...\",\n    description: \"\",\n    cards: []\n  });\n  const [newCardData, setNewCardData] = useState(initialFormState);\n  const history = useHistory();\n  const {\n    deckId\n  } = useParams();\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    const abortController = new AbortController();\n    async function loadDeck() {\n      try {\n        const loadedDeck = await readDeck(deckId, abortController.signal);\n        if (mountedRef.current) {\n          setDeck(() => loadedDeck);\n        }\n      } catch (error) {}\n    }\n  });\n}\n_s(AddCard, \"Z+4FYn778cMaGt+JPYdvt8Rpr9E=\", false, function () {\n  return [useHistory, useParams];\n});\n_c = AddCard;\nvar _c;\n$RefreshReg$(_c, \"AddCard\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Link","useParams","useHistory","readDeck","createCard","CardForm","AddCard","_s","mountedRef","initialFormState","id","front","back","deckId","deck","setDeck","name","description","cards","newCardData","setNewCardData","history","current","abortController","AbortController","loadDeck","loadedDeck","signal","error","_c","$RefreshReg$"],"sources":["/Users/matthewlewis/Documents/Thinkful/LQA/Project-_Flashcards-_Qualified-Matthew_Lewis-Solution/src/Layout/AddCard.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport { readDeck, createCard } from \"../utils/api\";\nimport CardForm from \"./CardForm\";\n\nfunction AddCard() {\n  const mountedRef = useRef(false);\n  const initialFormState = {\n    id: \"\",\n    front: \"\",\n    back: \"\",\n    deckId: \"\",\n  };\n  const [deck, setDeck] = useState({\n    name: \"loading...\",\n    description: \"\",\n    cards: [],\n  });\n  const [newCardData, setNewCardData] = useState(initialFormState);\n  const history = useHistory();\n  const { deckId } = useParams();\n\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current =false;\n    };\n  }, []);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    async function loadDeck() {\n      try {\n        const loadedDeck = await readDeck(deckId, abortController.signal);\n        if (mountedRef.current) {\n          setDeck(() => loadedDeck);\n        }\n      } catch (error) {}\n    }\n  })\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,IAAI,EAAEC,SAAS,EAAEC,UAAU,QAAQ,kBAAkB;AAC9D,SAASC,QAAQ,EAAEC,UAAU,QAAQ,cAAc;AACnD,OAAOC,QAAQ,MAAM,YAAY;AAEjC,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAMC,UAAU,GAAGT,MAAM,CAAC,KAAK,CAAC;EAChC,MAAMU,gBAAgB,GAAG;IACvBC,EAAE,EAAE,EAAE;IACNC,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE,EAAE;IACRC,MAAM,EAAE;EACV,CAAC;EACD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC;IAC/BkB,IAAI,EAAE,YAAY;IAClBC,WAAW,EAAE,EAAE;IACfC,KAAK,EAAE;EACT,CAAC,CAAC;EACF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAACW,gBAAgB,CAAC;EAChE,MAAMY,OAAO,GAAGnB,UAAU,CAAC,CAAC;EAC5B,MAAM;IAAEW;EAAO,CAAC,GAAGZ,SAAS,CAAC,CAAC;EAE9BJ,SAAS,CAAC,MAAM;IACdW,UAAU,CAACc,OAAO,GAAG,IAAI;IACzB,OAAO,MAAM;MACXd,UAAU,CAACc,OAAO,GAAE,KAAK;IAC3B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENzB,SAAS,CAAC,MAAM;IACd,MAAM0B,eAAe,GAAG,IAAIC,eAAe,CAAC,CAAC;IAC7C,eAAeC,QAAQA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMC,UAAU,GAAG,MAAMvB,QAAQ,CAACU,MAAM,EAAEU,eAAe,CAACI,MAAM,CAAC;QACjE,IAAInB,UAAU,CAACc,OAAO,EAAE;UACtBP,OAAO,CAAC,MAAMW,UAAU,CAAC;QAC3B;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE,CAAC;IACnB;EACF,CAAC,CAAC;AACJ;AAACrB,EAAA,CAnCQD,OAAO;EAAA,QAcEJ,UAAU,EACPD,SAAS;AAAA;AAAA4B,EAAA,GAfrBvB,OAAO;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}